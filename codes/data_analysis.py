import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import binascii
import os
import warnings
from sklearn.manifold import TSNE
# 获取家族样本数量分布图
def get_family_num():
    label = pd.read_csv('../data/raw_data/train_label.csv')
    total = len(label)*1
    ax = sns.countplot(x='family', data=label)

    # 设置坐标轴刻度文字的大小
    for p in ax.patches:
        ax.annotate('{:.1f}%'.format(100*p.get_height()/total), (p.get_x()+0.1, p.get_height()+5))


    ax.yaxis.set_ticks(np.linspace(0, total, 11))

    ax.set_yticklabels(map('{:.1f}%'.format, 100*ax.yaxis.get_majorticklocs()/total))
    plt.title("各家族样本数量分布图")
    plt.show()

# 获取PE文件大小特征
def get_PE_filesize_feature():
    label = pd.read_csv('../data/raw_data/train_label.csv')

    # 读取文件夹下的所有文件名
    files = os.listdir('../data/raw_data/train/pe')

    # 将文件名和标签合并
    filenames = label['filename'].tolist()
    class_y = label['family'].tolist()
    class_bytes = []
    sizebytes = []
    fnames = []
    for file in files:
        statinfo = os.stat('data/raw_data/train/pe/' + file)
        file = file.split('.')[0]

        # 如果文件名在标签中，则将其标签和文件大小加入列表
        if any(file == filename for filename in filenames):
            i = filenames.index(file)
            class_bytes.append(class_y[i])
            sizebytes.append(statinfo.st_size / (1024.0 * 1024.0))
            fnames.append(file)
        # 如果文件名不在标签中，则略过
        else:
            continue

    data_size_byte = pd.DataFrame({'filename': fnames, 'size': sizebytes, 'family': class_bytes})
    return data_size_byte
    print(data_size_byte.head())

# 获取ASM文件大小特征
def get_ASM_filesize_feature():
    label = pd.read_csv('raw_data/train_label.csv')

    # 读取文件夹下的所有文件名
    files = os.listdir('raw_data/train/asm')

    # 将文件名和标签合并
    filenames = label['filename'].tolist()
    class_y = label['family'].tolist()
    class_bytes = []
    sizebytes = []
    fnames = []
    for file in files:
        statinfo = os.stat('raw_data/train/asm/' + file)
        file = file.split('.')[0]

        # 如果文件名在标签中，则将其标签和文件大小加入列表
        if any(file == filename for filename in filenames):
            i = filenames.index(file)
            class_bytes.append(class_y[i])
            sizebytes.append(statinfo.st_size / (1024.0 * 1024.0))
            fnames.append(file)
        # 如果文件名不在标签中，则略过
        else:
            continue

    data_size_byte = pd.DataFrame({'filename': fnames, 'size': sizebytes, 'family': class_bytes})
    return data_size_byte
    print(data_size_byte.head())

# 展示文件大小特征
def show_PE_filesize_feature():
    data_size_byte = get_PE_filesize_feature()

    ax = sns.boxplot(x="family", y="size", data=data_size_byte)
    plt.title("PE 文件大小箱线图")
    plt.show()
def show_ASM_filesize_feature():
    data_size_byte = get_ASM_filesize_feature()

    ax = sns.boxplot(x="family", y="size", data=data_size_byte)
    plt.title("ASM 文件大小箱线图")
    plt.show()

# 读取train_y.npy文件
def read_npy_files():
    data = np.load('../data/user_data/train_y.npy')
    print(data.index())









if __name__ == '__main__':
    # get_family_num()

    read_npy_files();
